import { SanphamAPI, VoucherAPI, DonghoadonAPI, OrderItem, Voucher } from '../types';
import { Platform } from 'react-native';
import * as SecureStore from 'expo-secure-store';
import { jwtDecode } from 'jwt-decode';

const API_BASE_URL = 'http://localhost:8000/api';

// Type definitions for order data
export interface OrderHeader {
  idhoadon?: number;  // Optional as it will be generated by API
  ngayhd?: string;    // Backend sử dụng auto_now_add=True nên không cần gửi
  idnhanvien: number | string; // ID của nhân viên tạo hóa đơn
}

export interface OrderLine {
  idhoadon?: number;  // Will be filled in backend
  sottdong?: number;  // Will be filled in backend
  idsanpham: number;
  soluongsp: number;
  ghichu?: string;
  idvoucher?: number | null;
}

export interface CompleteOrder {
  header: OrderHeader;
  lines: OrderLine[];
}

// Hàm lấy token xác thực từ localStorage hoặc SecureStore
const getAuthToken = async (): Promise<string | null> => {
  try {
    if (Platform.OS === 'web') {
      return localStorage.getItem('access_token');
    } else {
      return await SecureStore.getItemAsync('access_token');
    }
  } catch (error) {
    console.error('Error getting auth token:', error);
    return null;
  }
};

// Lấy thông tin user hiện tại từ token JWT
export const getCurrentUser = async (): Promise<any | null> => {
  try {
    const token = await getAuthToken();
    if (!token) return null;

    console.log('Got token:', token.substring(0, 15) + '...');

    const decoded = jwtDecode(token);
    console.log('Decoded token structure:', JSON.stringify(decoded, null, 2));

    return decoded;
  } catch (error) {
    console.error('Error decoding token:', error);
    return null;
  }
};

// Hàm chuyển đổi từ SanphamAPI sang OrderItem
export const convertSanphamToOrderItem = (sanpham: SanphamAPI): OrderItem => {
  return {
    id: sanpham.idsanpham.toString(),
    name: sanpham.tensp,
    price: sanpham.giasp,
    quantity: 1,
    image: undefined // Cần cập nhật nếu có hình ảnh từ API
  };
};

// Hàm chuyển đổi từ VoucherAPI sang Voucher
export const convertVoucherAPIToVoucher = (voucherAPI: VoucherAPI): Voucher => {
  return {
    id: voucherAPI.idvoucher.toString(),
    title: `Giảm giá ${voucherAPI.giamgia}% cho ${voucherAPI.loaisp}`,
    expireDate: voucherAPI.thoigianketthucvoucher,
    discountValue: voucherAPI.giamgia.toString(),
    discountType: 'percentage',
    minimumOrderValue: 0
  };
};

// Lấy danh sách sản phẩm từ API
export const fetchSanpham = async (): Promise<SanphamAPI[]> => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 giây timeout

    const token = await getAuthToken();
    const headers: HeadersInit = {
      'Content-Type': 'application/json'
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${API_BASE_URL}/sanpham/`, {
      signal: controller.signal,
      headers
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching sanpham:', error);
    throw error;
  }
};

// Lấy danh sách voucher từ API
export const fetchVoucher = async (): Promise<VoucherAPI[]> => {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = {
      'Content-Type': 'application/json'
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${API_BASE_URL}/voucher/`, {
      headers
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching voucher:', error);
    throw error;
  }
};

// Chuyển đổi từ OrderItem array sang dữ liệu gửi lên API
const convertOrderItemsToOrderLines = (
  items: OrderItem[],
  voucherId: number | null = null
): OrderLine[] => {
  console.log('Converting order items to order lines:', items);

  // Ensure all items have valid IDs
  const validItems = items.filter(item => {
    const isValid = item.id && !isNaN(parseInt(item.id));
    if (!isValid) {
      console.error('Invalid item ID found:', item);
    }
    return isValid;
  });

  if (validItems.length === 0) {
    console.error('No valid items found to convert');
  }

  const orderLines = validItems.map(item => {
    const orderLine: OrderLine = {
      idsanpham: parseInt(item.id),
      soluongsp: item.quantity,
      idvoucher: voucherId
    };

    return orderLine;
  });

  console.log('Converted to order lines:', orderLines);
  return orderLines;
};

// Gửi hóa đơn hoàn chỉnh lên API
export const submitOrderToAPI = async (
  items: OrderItem[], 
  voucher: Voucher | null = null,
  notes: string = ''
): Promise<number> => {
  try {
    // Lấy thông tin user từ token
    const currentUser = await getCurrentUser();

    if (!currentUser) {
      throw new Error('Không tìm thấy thông tin người dùng, vui lòng đăng nhập lại');
    }

    // Tính tổng tiền
    const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    // Tính giảm giá (nếu có)
    let discountAmount = 0;
    let voucherId = null;

    if (voucher) {
      voucherId = parseInt(voucher.id);
      if (voucher.discountType === 'percentage') {
        discountAmount = subtotal * parseFloat(voucher.discountValue) / 100;
      } else {
        discountAmount = parseFloat(voucher.discountValue);
      }
    }

    // Tính tổng tiền sau giảm giá
    const totalAmount = Math.max(0, subtotal - discountAmount);

    // Tạo dữ liệu hóa đơn hoàn chỉnh
    const completeOrder = {
      idnhanvien: currentUser.IDNhanVien,
      lines: items.map(item => ({
        idsanpham: item.id, // ID sản phẩm
        soluongsp: item.quantity, // Số lượng sản phẩm
        idvoucher: voucherId, // Voucher nếu có
      }))
    };

    // Gửi dữ liệu lên API
    const token = await getAuthToken();
    const headers: HeadersInit = {
      'Content-Type': 'application/json'
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    console.log('Request headers:', headers);
    console.log('Request body:', JSON.stringify(completeOrder, null, 2));
    console.log('API endpoint:', `${API_BASE_URL}/createorder/`);

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 giây timeout

    const response = await fetch(`${API_BASE_URL}/createorder/`, {
      method: 'POST',
      headers,
      body: JSON.stringify(completeOrder),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('API response error:', response.status, errorText);
      throw new Error(`Lỗi khi tạo hóa đơn: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    return result.idhoadon; // Trả về ID của hóa đơn mới tạo

  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      console.error('Request timed out');
      throw new Error('Kết nối đến máy chủ quá lâu, vui lòng thử lại sau.');
    }
    console.error('Error submitting order:', error);
    throw error;
  }
};