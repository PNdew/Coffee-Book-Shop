import { SanphamAPI, VoucherAPI, DonghoadonAPI, OrderItem, Voucher } from '@/types';
import { Platform } from 'react-native';
import * as SecureStore from 'expo-secure-store';
import { jwtDecode } from 'jwt-decode';
import { getApiUrl } from './getAPIUrl';

const API_URL = getApiUrl();

// Type definitions for order data
export interface OrderHeader {
  idhoadon?: number;  // Optional as it will be generated by API
  ngayhd?: string;    // Backend sử dụng auto_now_add=True nên không cần gửi
  idnhanvien: number | string; // ID của nhân viên tạo hóa đơn
}

export interface OrderLine {
  idhoadon?: number;  // Will be filled in backend
  sottdong?: number;  // Will be filled in backend
  idsanpham: number;
  soluongsp: number;
  ghichu?: string;
  idvoucher?: number | null;
}

export interface CompleteOrder {
  header: OrderHeader;
  lines: OrderLine[];
}

// Hàm lấy token xác thực từ localStorage hoặc SecureStore
const getAuthToken = async (): Promise<string | null> => {
  try {
    if (Platform.OS === 'web') {
      return localStorage.getItem('access_token');
    } else {
      return await SecureStore.getItemAsync('access_token');
    }
  } catch (error) {
    console.error('Error getting auth token:', error);
    return null;
  }
};

// Lấy thông tin user hiện tại từ token JWT
export const getCurrentUser = async (): Promise<any | null> => {
  try {
    const token = await getAuthToken();
    if (!token) return null;

    console.log('Got token:', token.substring(0, 15) + '...');

    const decoded = jwtDecode(token);
    console.log('Decoded token structure:', JSON.stringify(decoded, null, 2));

    return decoded;
  } catch (error) {
    console.error('Error decoding token:', error);
    return null;
  }
};

// Hàm chuyển đổi từ SanphamAPI sang OrderItem
export const convertSanphamToOrderItem = (sanpham: SanphamAPI): OrderItem => {
  return {
    id: sanpham.idsanpham.toString(),
    name: sanpham.tensp,
    price: sanpham.giasp,
    quantity: 1,
    image: undefined // Cần cập nhật nếu có hình ảnh từ API
  };
};

// Hàm chuyển đổi từ VoucherAPI sang Voucher
export const convertVoucherAPIToVoucher = (voucherAPI: VoucherAPI): Voucher => {
  return {
    id: voucherAPI.idvoucher.toString(),
    title: `Giảm giá ${voucherAPI.giamgia}% cho ${voucherAPI.loaisp}`,
    expireDate: voucherAPI.thoigianketthucvoucher,
    discountValue: voucherAPI.giamgia.toString(),
    discountType: 'percentage',
    minimumOrderValue: 0
  };
};

// Lấy danh sách sản phẩm từ API
export const fetchSanpham = async (): Promise<SanphamAPI[]> => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 giây timeout

    const token = await getAuthToken();
    const headers: HeadersInit = {
      'Content-Type': 'application/json'
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${API_URL}/sanpham/`, {
      signal: controller.signal,
      headers
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching sanpham:', error);
    throw error;
  }
};

// Lấy danh sách voucher từ API
export const fetchVoucher = async (): Promise<VoucherAPI[]> => {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = {
      'Content-Type': 'application/json'
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${API_URL}/voucher/`, {
      headers
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching voucher:', error);
    throw error;
  }
};

// Gửi hóa đơn hoàn chỉnh lên API
export const submitOrderToAPI = async (
  items: OrderItem[],
  voucher: Voucher | null = null,
  notes: string = ''
): Promise<number> => {
  try {
    const currentUser = await getCurrentUser();
    if (!currentUser) {
      throw new Error('Không tìm thấy thông tin người dùng, vui lòng đăng nhập lại');
    }

    const token = await getAuthToken();
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    // 1️⃣ Gửi request tạo hóa đơn
    const createOrderRes = await fetch(`${API_URL}/order/create/`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        idnhanvien: currentUser.IDNhanVien,
      }),
    });

    if (!createOrderRes.ok) {
      const errText = await createOrderRes.text();
      throw new Error(`Không thể tạo hóa đơn: ${createOrderRes.status} - ${errText}`);
    }

    const { idhoadon } = await createOrderRes.json();

    // 2️⃣ Gửi chi tiết đơn hàng
    const orderDetailsRes = await fetch(`${API_URL}/order/details/`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        orderId: idhoadon,
        items: items.map(item => ({
          idsanpham: item.id,
          soluongsp: item.quantity,
        })),
        activeVoucher: voucher ? { idvoucher: parseInt(voucher.id) } : null,
        notes,
      }),
    });

    if (!orderDetailsRes.ok) {
      const errText = await orderDetailsRes.text();
      throw new Error(`Không thể gửi chi tiết đơn hàng: ${orderDetailsRes.status} - ${errText}`);
    }

    return idhoadon;
  } catch (error) {
    console.error('Lỗi submitOrderToAPI:', error);
    throw error;
  }
};

